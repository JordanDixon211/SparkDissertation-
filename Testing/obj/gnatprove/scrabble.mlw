(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_long_float__ref #"system.ads" 1 0 0# =
  { mutable long_long_float__content "model_trace:" : long_long_float }
 
 function long_long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_float__ref) : long_long_float =
  a.long_long_float__content
 
 meta "model_projection" function long_long_float__ref___projection
 
 meta "inline : no" function long_long_float__ref___projection
 
 val long_long_float__havoc #"system.ads" 1 0 0# 
   (x : long_long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type universal_real__ref #"system.ads" 1 0 0# =
  { mutable universal_real__content "model_trace:" : universal_real }
 
 function universal_real__ref___projection #"system.ads" 1 0 0# 
   (a : universal_real__ref) : universal_real =
  a.universal_real__content
 
 meta "model_projection" function universal_real__ref___projection
 
 meta "inline : no" function universal_real__ref___projection
 
 val universal_real__havoc #"system.ads" 1 0 0# 
   (x : universal_real__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "scrabble_letter" defined at scrabble.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__scrabble_letter
 use import "_gnatprove_standard".Main
 use import "int".Int

 type scrabble_letter #"scrabble.ads" 3 0 0# 
 
 function first #"scrabble.ads" 3 0 0# 
   : int =
  65
 
 function last #"scrabble.ads" 3 0 0# 
   : int =
  90
 
 predicate in_range #"scrabble.ads" 3 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = scrabble_letter, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type scrabble_letter__ref #"scrabble.ads" 3 0 0# =
  { mutable scrabble_letter__content "model_trace:" : scrabble_letter }
 
 function scrabble_letter__ref___projection #"scrabble.ads" 3 0 0# 
   (a : scrabble_letter__ref) : scrabble_letter =
  a.scrabble_letter__content
 
 meta "model_projection" function scrabble_letter__ref___projection
 
 meta "inline : no" function scrabble_letter__ref___projection
 
 val scrabble_letter__havoc #"scrabble.ads" 3 0 0# 
   (x : scrabble_letter__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "scrabble_value" defined at scrabble.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__scrabble_value
 use import "_gnatprove_standard".Main
 use import "int".Int

 type scrabble_value #"scrabble.ads" 5 0 0# 
 
 function first #"scrabble.ads" 5 0 0# 
   : int =
  1
 
 function last #"scrabble.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"scrabble.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = scrabble_value, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type scrabble_value__ref #"scrabble.ads" 5 0 0# =
  { mutable scrabble_value__content "model_trace:" : scrabble_value }
 
 function scrabble_value__ref___projection #"scrabble.ads" 5 0 0# 
   (a : scrabble_value__ref) : scrabble_value =
  a.scrabble_value__content
 
 meta "model_projection" function scrabble_value__ref___projection
 
 meta "inline : no" function scrabble_value__ref___projection
 
 val scrabble_value__havoc #"scrabble.ads" 5 0 0# 
   (x : scrabble_value__ref) : unit
  writes {x}

end

(* Module for defining the constant "I6s" defined at scrabble.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Scrabble__scrabble_valuePredicate__I6s
 use import "_gnatprove_standard".Main

 function i6s #"scrabble.ads" 5 0 0# 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"scrabble.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "I6s" defined at scrabble.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Scrabble__scrabble_valuePredicate__I6s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "scrabble_valuePredicate" defined at scrabble.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Scrabble__scrabble_valuePredicate
 use import "_gnatprove_standard".Main

 function scrabble_valuePredicate #"scrabble.ads" 5 0 0# 
   (i6s : int) : bool

end

(* Module for axiomatizing the array theory associated to type "scrabble_word" defined at scrabble.ads:8, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Scrabble__scrabble_letter
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_letter

 function index_I1_one #"scrabble.ads" 5 0 0# 
   : int =
  1
 
 type component_type #"scrabble.ads" 5 0 0# =
  Scrabble__scrabble_letter.scrabble_letter
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"scrabble.ads" 3 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Scrabble__scrabble_letter.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "scrabble_word" defined at scrabble.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__scrabble_word
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Scrabble__scrabble_letter
 use        Array__Int__Scrabble__scrabble_letter

 type component_type #"scrabble.ads" 3 0 0# =
  Scrabble__scrabble_letter.scrabble_letter
 
 function index_1_id #"scrabble.ads" 3 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Scrabble__scrabble_letter.map, 
 function array_bool_eq = Array__Int__Scrabble__scrabble_letter.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type scrabble_word #"scrabble.ads" 8 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type scrabble_word__ref #"scrabble.ads" 8 0 0# =
  { mutable scrabble_word__content "model_trace:" : scrabble_word }
 
 function scrabble_word__ref___projection #"scrabble.ads" 8 0 0# 
   (a : scrabble_word__ref) : scrabble_word =
  a.scrabble_word__content
 
 meta "model_projection" function scrabble_word__ref___projection
 
 meta "inline : no" function scrabble_word__ref___projection
 
 val scrabble_word__havoc #"scrabble.ads" 8 0 0# 
   (x : scrabble_word__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "scrabblescore" defined at scrabble.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__scrabblescore
 use import "_gnatprove_standard".Main
 use import "int".Int

 type scrabblescore #"scrabble.ads" 10 0 0# 
 
 function first #"scrabble.ads" 10 0 0# 
   : int =
  0
 
 function last #"scrabble.ads" 10 0 0# 
   : int =
  100
 
 predicate in_range #"scrabble.ads" 10 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = scrabblescore, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type scrabblescore__ref #"scrabble.ads" 10 0 0# =
  { mutable scrabblescore__content "model_trace:" : scrabblescore }
 
 function scrabblescore__ref___projection #"scrabble.ads" 10 0 0# 
   (a : scrabblescore__ref) : scrabblescore =
  a.scrabblescore__content
 
 meta "model_projection" function scrabblescore__ref___projection
 
 meta "inline : no" function scrabblescore__ref___projection
 
 val scrabblescore__havoc #"scrabble.ads" 10 0 0# 
   (x : scrabblescore__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "rand" defined at scrabble.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__rand
 use import "_gnatprove_standard".Main
 use import "int".Int

 type rand #"scrabble.ads" 11 0 0# 
 
 function first #"scrabble.ads" 11 0 0# 
   : int =
  1
 
 function last #"scrabble.ads" 11 0 0# 
   : int =
  5
 
 predicate in_range #"scrabble.ads" 11 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = rand, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type rand__ref #"scrabble.ads" 11 0 0# =
  { mutable rand__content "model_trace:" : rand }
 
 function rand__ref___projection #"scrabble.ads" 11 0 0# 
   (a : rand__ref) : rand =
  a.rand__content
 
 meta "model_projection" function rand__ref___projection
 
 meta "inline : no" function rand__ref___projection
 
 val rand__havoc #"scrabble.ads" 11 0 0# 
   (x : rand__ref) : unit
  writes {x}

end

(* Module for defining the constant "word" defined at scrabble.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Scrabble__rawscore__word
 use import "_gnatprove_standard".Main
 use        Scrabble__scrabble_word

 function word #"scrabble.ads" 13 0 0# "model_projected" "model_trace:2623" 
   : Scrabble__scrabble_word.scrabble_word
 
 function attr__ATTRIBUTE_ADDRESS #"scrabble.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "word" defined at scrabble.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Scrabble__rawscore__word__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rawscore" defined at scrabble.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Scrabble__rawscore
 use import "_gnatprove_standard".Main
 use        Scrabble__scrabble_word

 function rawscore #"scrabble.ads" 13 0 0# 
   (word : Scrabble__scrabble_word.scrabble_word) : int

end

(* Module for defining the constant "numbers" defined at scrabble.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Scrabble__donothing__numbers
 use import "_gnatprove_standard".Main

 function numbers #"scrabble.ads" 20 0 0# "model" "model_trace:2664" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "numbers" defined at scrabble.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Scrabble__donothing__numbers__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "donothing" defined at scrabble.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Scrabble__donothing
 use import "_gnatprove_standard".Main

 function donothing #"scrabble.ads" 20 0 0# 
   (numbers : int) : int

end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name #"system.ads" 46 0 0# 
 
 function first #"system.ads" 46 0 0# 
   : int =
  0
 
 function last #"system.ads" 46 0 0# 
   : int =
  0
 
 predicate in_range #"system.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type name__ref #"system.ads" 46 0 0# =
  { mutable name__content "model_trace:" : name }
 
 function name__ref___projection #"system.ads" 46 0 0# 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc #"system.ads" 46 0 0# 
   (x : name__ref) : unit
  writes {x}

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0# "model" "model_trace:3047" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 46 0 0# 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type address #"system.ads" 108 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"system.ads" 108 0 0# 
   : BV32.t
 
 function first #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"system.ads" 108 0 0# 
   : int =
  0
 
 function last_int #"system.ads" 108 0 0# 
   : int =
  4294967295
 
 predicate in_range #"system.ads" 108 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"system.ads" 108 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type address__ref #"system.ads" 108 0 0# =
  { mutable address__content "model_trace:" : address }
 
 function address__ref___projection #"system.ads" 108 0 0# 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc #"system.ads" 108 0 0# 
   (x : address__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_address #"system.ads" 69 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order #"system.ads" 91 0 0# 
 
 function first #"system.ads" 91 0 0# 
   : int =
  0
 
 function last #"system.ads" 91 0 0# 
   : int =
  1
 
 predicate in_range #"system.ads" 91 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type bit_order__ref #"system.ads" 91 0 0# =
  { mutable bit_order__content "model_trace:" : bit_order }
 
 function bit_order__ref___projection #"system.ads" 91 0 0# 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc #"system.ads" 91 0 0# 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0# "model" "model_trace:3396" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 91 0 0# 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0# "model" "model_trace:3412" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0# "model" "model_trace:3422" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority #"system.ads" 100 0 0# 
 
 function first #"system.ads" 100 0 0# 
   : int =
  0
 
 function last #"system.ads" 100 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 100 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type any_priority__ref #"system.ads" 100 0 0# =
  { mutable any_priority__content "model_trace:" : any_priority }
 
 function any_priority__ref___projection #"system.ads" 100 0 0# 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc #"system.ads" 100 0 0# 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority #"system.ads" 101 0 0# 
 
 function first #"system.ads" 101 0 0# 
   : int =
  0
 
 function last #"system.ads" 101 0 0# 
   : int =
  30
 
 predicate in_range #"system.ads" 101 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type priority__ref #"system.ads" 101 0 0# =
  { mutable priority__content "model_trace:" : priority }
 
 function priority__ref___projection #"system.ads" 101 0 0# 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc #"system.ads" 101 0 0# 
   (x : priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority #"system.ads" 102 0 0# 
 
 function first #"system.ads" 102 0 0# 
   : int =
  31
 
 function last #"system.ads" 102 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 102 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type interrupt_priority__ref #"system.ads" 102 0 0# =
  { mutable interrupt_priority__content "model_trace:" : interrupt_priority }
 
 function interrupt_priority__ref___projection #"system.ads" 102 0 0# 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc #"system.ads" 102 0 0# 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0# "model" "model_trace:3474" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 101 0 0# 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0# "model" "model_trace:3504" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 121 0 0# 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0# "model" "model_trace:3514" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 122 0 0# 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0# "model" "model_trace:3524" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 123 0 0# 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0# "model" "model_trace:3534" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 124 0 0# 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0# "model" "model_trace:3544" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 125 0 0# 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0# "model" "model_trace:3554" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 126 0 0# 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0# "model" "model_trace:3564" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 127 0 0# 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0# "model" "model_trace:3574" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 128 0 0# 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0# "model" "model_trace:3584" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 129 0 0# 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0# "model" "model_trace:3594" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 130 0 0# 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0# "model" "model_trace:3604" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 131 0 0# 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0# "model" "model_trace:3614" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 132 0 0# 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0# "model" "model_trace:3624" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 133 0 0# 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0# "model" "model_trace:3634" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 134 0 0# 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0# "model" "model_trace:3644" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 135 0 0# 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0# "model" "model_trace:3654" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 136 0 0# 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0# "model" "model_trace:3664" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 137 0 0# 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0# "model" "model_trace:3674" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 138 0 0# 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0# "model" "model_trace:3684" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0# "model" "model_trace:3694" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 140 0 0# 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0# "model" "model_trace:3704" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 141 0 0# 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0# "model" "model_trace:3714" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0# "model" "model_trace:3724" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 143 0 0# 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0# "model" "model_trace:3734" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 144 0 0# 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0# "model" "model_trace:3744" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 145 0 0# 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0# "model" "model_trace:3754" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 146 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 function index_I1_one #"system.ads" 146 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 146 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB #"system.ads" 161 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref #"system.ads" 161 0 0# =
  { mutable tpriorities_mappingB__content "model_trace:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection #"system.ads" 161 0 0# 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc #"system.ads" 161 0 0# 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 161 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"system.ads" 166 0 0# 
 
 function first #"system.ads" 166 0 0# 
   : int =
  0
 
 function last #"system.ads" 166 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 166 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3s__ref #"system.ads" 166 0 0# =
  { mutable t3s__content "model_trace:" : t3s }
 
 function t3s__ref___projection #"system.ads" 166 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc #"system.ads" 166 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 166 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0# "model_projected" "model_trace:3780" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 161 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tscrabble_value_lookupB" defined at scrabble.adb:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Scrabble__scrabble_value
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_value

 function index_I1_one #"system.ads" 161 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 161 0 0# =
  Scrabble__scrabble_value.scrabble_value
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"scrabble.ads" 5 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Scrabble__scrabble_value.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Tscrabble_value_lookupB" defined at scrabble.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__Tscrabble_value_lookupB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Scrabble__scrabble_letter
 use        Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value

 type component_type #"scrabble.ads" 5 0 0# =
  Scrabble__scrabble_value.scrabble_value
 
 function index_1_id #"scrabble.ads" 5 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Scrabble__scrabble_value.map, 
 function array_bool_eq = Array__Int__Scrabble__scrabble_value.bool_eq, 
 type index_base_type = Standard__character.character, 
 type index_rep_type = int, 
 function to_rep = Standard__character.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__character.in_range, 
 predicate index_dynamic_property = Scrabble__scrabble_letter.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tscrabble_value_lookupB #"scrabble.adb" 5 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tscrabble_value_lookupB__ref #"scrabble.adb" 5 0 0# =
  { mutable tscrabble_value_lookupB__content "model_trace:" : tscrabble_value_lookupB }
 
 function tscrabble_value_lookupB__ref___projection #"scrabble.adb" 5 0 0# 
   (a : tscrabble_value_lookupB__ref) : tscrabble_value_lookupB =
  a.tscrabble_value_lookupB__content
 
 meta "model_projection" function tscrabble_value_lookupB__ref___projection
 
 meta "inline : no" function tscrabble_value_lookupB__ref___projection
 
 val tscrabble_value_lookupB__havoc #"scrabble.adb" 5 0 0# 
   (x : tscrabble_value_lookupB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "scrabble_value_lookup" defined at scrabble.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__scrabble_value_lookup
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value

 type component_type #"scrabble.adb" 5 0 0# =
  Scrabble__scrabble_value.scrabble_value
 
 function first #"scrabble.ads" 5 0 0# 
   : int =
  65
 
 function last #"scrabble.ads" 5 0 0# 
   : int =
  90
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Scrabble__scrabble_value.map, 
 function array_bool_eq = Array__Int__Scrabble__scrabble_value.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at scrabble.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3b #"scrabble.adb" 7 0 0# 
 
 function first #"scrabble.adb" 7 0 0# 
   : int =
  65
 
 function last #"scrabble.adb" 7 0 0# 
   : int =
  90
 
 predicate in_range #"scrabble.adb" 7 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3b__ref #"scrabble.adb" 7 0 0# =
  { mutable t3b__content "model_trace:" : t3b }
 
 function t3b__ref___projection #"scrabble.adb" 7 0 0# 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc #"scrabble.adb" 7 0 0# 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at scrabble.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value

 type component_type #"scrabble.adb" 7 0 0# =
  Scrabble__scrabble_value.scrabble_value
 
 function first #"scrabble.ads" 5 0 0# 
   : int =
  65
 
 function last #"scrabble.ads" 5 0 0# 
   : int =
  90
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Scrabble__scrabble_value.map, 
 function array_bool_eq = Array__Int__Scrabble__scrabble_value.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "lookuptable" defined at scrabble.adb:6, created in Gnat2Why.Decls.Translate_Constant *)
module Scrabble__lookuptable
 use import "_gnatprove_standard".Main
 use        Array__Int__Scrabble__scrabble_value

 function lookuptable #"scrabble.adb" 6 0 0# "model_projected" "model_trace:2327" 
   : Array__Int__Scrabble__scrabble_value.map
 
 function attr__ATTRIBUTE_ADDRESS #"scrabble.adb" 5 0 0# 
   : int

end

(* Module for axiomatizing type "TS5bP1" defined at scrabble.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__rawscore__TS5bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 type tS5bP1 #"scrabble.adb" 15 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS5bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer.to_rep, 
 function base_of_rep = Standard__integer.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS5bP1__ref #"scrabble.adb" 15 0 0# =
  { mutable tS5bP1__content "model_trace:" : tS5bP1 }
 
 function tS5bP1__ref___projection #"scrabble.adb" 15 0 0# 
   (a : tS5bP1__ref) : tS5bP1 =
  a.tS5bP1__content
 
 meta "model_projection" function tS5bP1__ref___projection
 
 meta "inline : no" function tS5bP1__ref___projection
 
 val tS5bP1__havoc #"scrabble.adb" 15 0 0# 
   (x : tS5bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S5b" defined at scrabble.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__rawscore__S5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Scrabble__scrabble_letter
 use        Array__Int__Scrabble__scrabble_letter
 use        Scrabble__rawscore__TS5bP1

 type component_type #"scrabble.adb" 15 0 0# =
  Scrabble__scrabble_letter.scrabble_letter
 
 function index_1_id #"scrabble.ads" 3 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Scrabble__scrabble_letter.map, 
 function array_bool_eq = Array__Int__Scrabble__scrabble_letter.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Scrabble__rawscore__TS5bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s5b #"scrabble.adb" 15 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s5b__ref #"scrabble.adb" 15 0 0# =
  { mutable s5b__content "model_trace:" : s5b }
 
 function s5b__ref___projection #"scrabble.adb" 15 0 0# 
   (a : s5b__ref) : s5b =
  a.s5b__content
 
 meta "model_projection" function s5b__ref___projection
 
 meta "inline : no" function s5b__ref___projection
 
 val s5b__havoc #"scrabble.adb" 15 0 0# 
   (x : s5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at scrabble.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Scrabble__rawscore__L_1__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 type t6b #"scrabble.adb" 19 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer.to_rep, 
 function base_of_rep = Standard__integer.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref #"scrabble.adb" 19 0 0# =
  { mutable t6b__content "model_trace:" : t6b }
 
 function t6b__ref___projection #"scrabble.adb" 19 0 0# 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc #"scrabble.adb" 19 0 0# 
   (x : t6b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "totalscore" defined at scrabble.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Scrabble__rawscore__totalscore
 use import "_gnatprove_standard".Main

 val totalscore #"scrabble.adb" 17 0 0# "model" "model_trace:2435"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"scrabble.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "totalscore" defined at scrabble.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Scrabble__rawscore__totalscore__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "letter_index" defined at scrabble.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Scrabble__rawscore__L_1__letter_index
 use import "_gnatprove_standard".Main

 val letter_index #"scrabble.adb" 19 0 0# "model" "model_trace:2448"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"scrabble.adb" 19 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "letter_index" defined at scrabble.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Scrabble__rawscore__L_1__letter_index__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"scrabble.adb" 19 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___do_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___4 : int) (temp___5 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___do_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___10 : int) (temp___11 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___do_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___16 : int) (temp___17 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___do_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___22 : int) (temp___23 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___do_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___28 : int) (temp___29 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___do_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___34 : int) (temp___35 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___do_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___40 : int) (temp___41 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Standard__short_float.short_float) (temp___is_init_42 : bool) (temp___do_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___46 : Standard__short_float.short_float) (temp___47 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Standard__float.float) (temp___is_init_48 : bool) (temp___do_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___52 : Standard__float.float) (temp___53 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Standard__long_float.long_float) (temp___is_init_54 : bool) (temp___do_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___58 : Standard__long_float.long_float) (temp___59 : bool)  =
  true

end

(* Module giving axioms for type "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : Standard__long_long_float.long_long_float) (temp___is_init_60 : bool) (temp___do_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___64 : Standard__long_long_float.long_long_float) (temp___65 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___do_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  (if (( temp___is_init_66 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___70 : int) (temp___71 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___do_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  (if (( temp___is_init_72 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___76 : int) (temp___77 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_81 : int) (temp___is_init_78 : bool) (temp___do_constant_79 : bool) (temp___do_toplevel_80 : bool)  =
  (if (( temp___is_init_78 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___82 : int) (temp___83 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_87 : Standard__string.string) (temp___is_init_84 : bool) (temp___do_constant_85 : bool) (temp___do_toplevel_86 : bool)  =
  (if (temp___do_constant_85) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_87) (Standard__string.last temp___expr_87))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_92 : Standard__wide_string.wide_string) (temp___is_init_89 : bool) (temp___do_constant_90 : bool) (temp___do_toplevel_91 : bool)  =
  (if (temp___do_constant_90) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_92) (Standard__wide_string.last temp___expr_92))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_97 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_94 : bool) (temp___do_constant_95 : bool) (temp___do_toplevel_96 : bool)  =
  (if (temp___do_constant_95) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_97) (Standard__wide_wide_string.last temp___expr_97))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_102 : Standard__duration.duration) (temp___is_init_99 : bool) (temp___do_constant_100 : bool) (temp___do_toplevel_101 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___103 : Standard__duration.duration) (temp___104 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_108 : int) (temp___is_init_105 : bool) (temp___do_constant_106 : bool) (temp___do_toplevel_107 : bool)  =
  (if (( temp___is_init_105 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_108)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___109 : int) (temp___110 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_114 : int) (temp___is_init_111 : bool) (temp___do_constant_112 : bool) (temp___do_toplevel_113 : bool)  =
  (if (( temp___is_init_111 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_114)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___115 : int) (temp___116 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_120 : int) (temp___is_init_117 : bool) (temp___do_constant_118 : bool) (temp___do_toplevel_119 : bool)  =
  (if (( temp___is_init_117 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_120)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___121 : int) (temp___122 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_126 : int) (temp___is_init_123 : bool) (temp___do_constant_124 : bool) (temp___do_toplevel_125 : bool)  =
  (if (( temp___is_init_123 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_126)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___127 : int) (temp___128 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_132 : int) (temp___is_init_129 : bool) (temp___do_constant_130 : bool) (temp___do_toplevel_131 : bool)  =
  (if (( temp___is_init_129 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_132)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___133 : int) (temp___134 : bool)  =
  true

end

(* Module giving axioms for type "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_138 : Standard__universal_real.universal_real) (temp___is_init_135 : bool) (temp___do_constant_136 : bool) (temp___do_toplevel_137 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___139 : Standard__universal_real.universal_real) (temp___140 : bool)  =
  true

end

(* Module for defining the constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module System__min_int
 use import "_gnatprove_standard".Main

 function min_int #"system.ads" 51 0 0# "model" "model_trace:3057" 
   : int

end

(* Module for defining the constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_int
 use import "_gnatprove_standard".Main

 function max_int #"system.ads" 52 0 0# "model" "model_trace:3068" 
   : int

end

(* Module for defining the constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_binary_modulus
 use import "_gnatprove_standard".Main

 function max_binary_modulus #"system.ads" 54 0 0# "model" "model_trace:3079" 
   : int

end

(* Module for defining the constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_nonbinary_modulus
 use import "_gnatprove_standard".Main

 function max_nonbinary_modulus #"system.ads" 55 0 0# "model" "model_trace:3092" 
   : int

end

(* Module for defining the constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_base_digits
 use import "_gnatprove_standard".Main

 function max_base_digits #"system.ads" 57 0 0# "model" "model_trace:3107" 
   : int

end

(* Module for defining the constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_digits
 use import "_gnatprove_standard".Main

 function max_digits #"system.ads" 58 0 0# "model" "model_trace:3117" 
   : int

end

(* Module for defining the constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_mantissa
 use import "_gnatprove_standard".Main

 function max_mantissa #"system.ads" 60 0 0# "model" "model_trace:3127" 
   : int

end

(* Module for defining the constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module System__fine_delta
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function fine_delta #"system.ads" 61 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__tick
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function tick #"system.ads" 63 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_unit
 use import "_gnatprove_standard".Main

 function storage_unit #"system.ads" 71 0 0# "model" "model_trace:3178" 
   : int

end

(* Module for defining the constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module System__word_size
 use import "_gnatprove_standard".Main

 function word_size #"system.ads" 72 0 0# "model" "model_trace:3187" 
   : int

end

(* Module for defining the constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module System__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"system.ads" 73 0 0# "model" "model_trace:3196" 
   : int

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def #"system.ads" 166 0 0# 
   (temp___142 : int) (temp___143 : int) (temp___144 : int) (temp___145 : int) (temp___146 : int) (temp___147 : int) (temp___148 : int) (temp___149 : int) (temp___150 : int) (temp___151 : int) (temp___152 : int) (temp___153 : int) (temp___154 : int) (temp___155 : int) (temp___156 : int) (temp___157 : int) : Array__Int__Standard__integer.map
 
 axiom def_axiom :
  (forall temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157 : int.
   (let temp___141 = (system__underlying_priorities__aggregate_def temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157) in (
    (forall temp___158 : int.
     (if (( (31 <= temp___158) /\ (temp___158 <= 31) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___157))) else if (( (21 <= temp___158) /\ (temp___158 <= 30) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___156)))  else if ((temp___158 = 20)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___155)))  else if ((temp___158 = 19)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___154)))  else if ((temp___158 = 18)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___153)))  else if ((temp___158 = 17)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___152)))  else if ((temp___158 = 16)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___151)))  else if ((temp___158 = 15)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___150)))  else if ((temp___158 = 14)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___149)))  else if ((temp___158 = 13)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___148)))  else if ((temp___158 = 12)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___147)))  else if ((temp___158 = 11)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___146)))  else if ((temp___158 = 10)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___145)))  else if ((temp___158 = 9)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___144)))  else if ((temp___158 = 8)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___143)))  else if (( (0 <= temp___158) /\ (temp___158 <= 7) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___142))) else (
      true)))))
  )

end

(* Module for defining the value of the aggregate at scrabble.adb:7, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Scrabble__lookuptable__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value

 function scrabble__lookuptable__aggregate_def #"scrabble.adb" 7 0 0# 
   (temp___160 : int) (temp___161 : int) (temp___162 : int) (temp___163 : int) (temp___164 : int) (temp___165 : int) (temp___166 : int) (temp___167 : int) (temp___168 : int) (temp___169 : int) (temp___170 : int) (temp___171 : int) (temp___172 : int) (temp___173 : int) (temp___174 : int) (temp___175 : int) (temp___176 : int) (temp___177 : int) (temp___178 : int) (temp___179 : int) (temp___180 : int) (temp___181 : int) (temp___182 : int) (temp___183 : int) (temp___184 : int) (temp___185 : int) : Array__Int__Scrabble__scrabble_value.map
 
 axiom def_axiom :
  (forall temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 temp___175 temp___176 temp___177 temp___178 temp___179 temp___180 temp___181 temp___182 temp___183 temp___184 temp___185 : int.
   (let temp___159 = (scrabble__lookuptable__aggregate_def temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 temp___175 temp___176 temp___177 temp___178 temp___179 temp___180 temp___181 temp___182 temp___183 temp___184 temp___185) in (
    ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Array__Int__Scrabble__scrabble_value.get temp___159 65) = (Scrabble__scrabble_value.of_rep temp___160)) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 66) = (Scrabble__scrabble_value.of_rep temp___161)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 67) = (Scrabble__scrabble_value.of_rep temp___162)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 68) = (Scrabble__scrabble_value.of_rep temp___163)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 69) = (Scrabble__scrabble_value.of_rep temp___164)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 70) = (Scrabble__scrabble_value.of_rep temp___165)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 71) = (Scrabble__scrabble_value.of_rep temp___166)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 72) = (Scrabble__scrabble_value.of_rep temp___167)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 73) = (Scrabble__scrabble_value.of_rep temp___168)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 74) = (Scrabble__scrabble_value.of_rep temp___169)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 75) = (Scrabble__scrabble_value.of_rep temp___170)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 76) = (Scrabble__scrabble_value.of_rep temp___171)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 77) = (Scrabble__scrabble_value.of_rep temp___172)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 78) = (Scrabble__scrabble_value.of_rep temp___173)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 79) = (Scrabble__scrabble_value.of_rep temp___174)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 80) = (Scrabble__scrabble_value.of_rep temp___175)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 81) = (Scrabble__scrabble_value.of_rep temp___176)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 82) = (Scrabble__scrabble_value.of_rep temp___177)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 83) = (Scrabble__scrabble_value.of_rep temp___178)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 84) = (Scrabble__scrabble_value.of_rep temp___179)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 85) = (Scrabble__scrabble_value.of_rep temp___180)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 86) = (Scrabble__scrabble_value.of_rep temp___181)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 87) = (Scrabble__scrabble_value.of_rep temp___182)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 88) = (Scrabble__scrabble_value.of_rep temp___183)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 89) = (Scrabble__scrabble_value.of_rep temp___184)) ) /\ ((Array__Int__Scrabble__scrabble_value.get temp___159 90) = (Scrabble__scrabble_value.of_rep temp___185)) )))
  )

end

(* Module for defining the loop exit exception for the loop "L_1" defined at scrabble.adb:19, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Scrabble__rawscore__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at scrabble.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Scrabble__rawscore__L_1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "scrabble_letter" defined at scrabble.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__scrabble_letter__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_letter

 predicate dynamic_invariant #"scrabble.adb" 19 0 0# "inline" 
   (temp___expr_190 : int) (temp___is_init_187 : bool) (temp___do_constant_188 : bool) (temp___do_toplevel_189 : bool)  =
  (if (( temp___is_init_187 \/ (Scrabble__scrabble_letter.first <= Scrabble__scrabble_letter.last) )) then (
   (Scrabble__scrabble_letter.dynamic_property Scrabble__scrabble_letter.first Scrabble__scrabble_letter.last temp___expr_190)) else true)
 
 predicate default_initial_assumption #"scrabble.ads" 3 0 0# "inline" 
   (temp___191 : int) (temp___192 : bool)  =
  true

end

(* Module giving axioms for type "scrabble_value" defined at scrabble.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__scrabble_value__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_value

 predicate dynamic_invariant #"scrabble.ads" 3 0 0# "inline" 
   (temp___expr_196 : int) (temp___is_init_193 : bool) (temp___do_constant_194 : bool) (temp___do_toplevel_195 : bool)  =
  ( (if (( temp___is_init_193 \/ (Scrabble__scrabble_value.first <= Scrabble__scrabble_value.last) )) then (
   (Scrabble__scrabble_value.dynamic_property Scrabble__scrabble_value.first Scrabble__scrabble_value.last temp___expr_196)) else true) /\ (if (temp___do_toplevel_195) then (
   (if (temp___is_init_193) then (
    (let temp___197 = temp___expr_196 in (
     ( ( (1 <= temp___197) /\ (temp___197 <= 5) ) \/ ( ( (8 <= temp___197) /\ (temp___197 <= 8) ) \/ ( (10 <= temp___197) /\ (temp___197 <= 10) ) ) )))
   ) else true)) else true) )
 
 predicate default_initial_assumption #"scrabble.ads" 5 0 0# "inline" 
   (temp___198 : int) (temp___199 : bool)  =
  true
 
 predicate dynamic_predicate #"scrabble.ads" 5 0 0# "inline" 
   (temp___200 : int)  =
  (let temp___201 = temp___200 in (
   ( ( (1 <= temp___201) /\ (temp___201 <= 5) ) \/ ( ( (8 <= temp___201) /\ (temp___201 <= 8) ) \/ ( (10 <= temp___201) /\ (temp___201 <= 10) ) ) )))


end

(* Module giving axioms for type "scrabble_word" defined at scrabble.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__scrabble_word__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Scrabble__scrabble_word

 predicate dynamic_invariant #"scrabble.ads" 5 0 0# "inline" 
   (temp___expr_205 : Scrabble__scrabble_word.scrabble_word) (temp___is_init_202 : bool) (temp___do_constant_203 : bool) (temp___do_toplevel_204 : bool)  =
  (if (temp___do_constant_203) then (
   true) else (
   (Scrabble__scrabble_word.dynamic_property Standard__positive.first Standard__positive.last (Scrabble__scrabble_word.first temp___expr_205) (Scrabble__scrabble_word.last temp___expr_205))))

end

(* Module giving axioms for type "scrabblescore" defined at scrabble.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__scrabblescore__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabblescore

 predicate dynamic_invariant #"scrabble.ads" 8 0 0# "inline" 
   (temp___expr_210 : int) (temp___is_init_207 : bool) (temp___do_constant_208 : bool) (temp___do_toplevel_209 : bool)  =
  (if (( temp___is_init_207 \/ (Scrabble__scrabblescore.first <= Scrabble__scrabblescore.last) )) then (
   (Scrabble__scrabblescore.dynamic_property Scrabble__scrabblescore.first Scrabble__scrabblescore.last temp___expr_210)) else true)
 
 predicate default_initial_assumption #"scrabble.ads" 10 0 0# "inline" 
   (temp___211 : int) (temp___212 : bool)  =
  true

end

(* Module giving axioms for type "rand" defined at scrabble.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__rand__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__rand

 predicate dynamic_invariant #"scrabble.ads" 10 0 0# "inline" 
   (temp___expr_216 : int) (temp___is_init_213 : bool) (temp___do_constant_214 : bool) (temp___do_toplevel_215 : bool)  =
  (if (( temp___is_init_213 \/ (Scrabble__rand.first <= Scrabble__rand.last) )) then (
   (Scrabble__rand.dynamic_property Scrabble__rand.first Scrabble__rand.last temp___expr_216)) else true)
 
 predicate default_initial_assumption #"scrabble.ads" 11 0 0# "inline" 
   (temp___217 : int) (temp___218 : bool)  =
  true

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant #"scrabble.ads" 11 0 0# "inline" 
   (temp___expr_222 : int) (temp___is_init_219 : bool) (temp___do_constant_220 : bool) (temp___do_toplevel_221 : bool)  =
  (if (( temp___is_init_219 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_222)) else true)
 
 predicate default_initial_assumption #"system.ads" 46 0 0# "inline" 
   (temp___223 : int) (temp___224 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address

 predicate dynamic_invariant #"system.ads" 46 0 0# "inline" 
   (temp___expr_228 : BV32.t) (temp___is_init_225 : bool) (temp___do_constant_226 : bool) (temp___do_toplevel_227 : bool)  =
  (if (( temp___is_init_225 \/ (BV32.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_228)) else true)
 
 predicate default_initial_assumption #"system.ads" 108 0 0# "inline" 
   (temp___229 : BV32.t) (temp___230 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant #"system.ads" 108 0 0# "inline" 
   (temp___expr_234 : int) (temp___is_init_231 : bool) (temp___do_constant_232 : bool) (temp___do_toplevel_233 : bool)  =
  (if (( temp___is_init_231 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_234)) else true)
 
 predicate default_initial_assumption #"system.ads" 91 0 0# "inline" 
   (temp___235 : int) (temp___236 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant #"system.ads" 91 0 0# "inline" 
   (temp___expr_240 : int) (temp___is_init_237 : bool) (temp___do_constant_238 : bool) (temp___do_toplevel_239 : bool)  =
  (if (( temp___is_init_237 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_240)) else true)
 
 predicate default_initial_assumption #"system.ads" 100 0 0# "inline" 
   (temp___241 : int) (temp___242 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant #"system.ads" 100 0 0# "inline" 
   (temp___expr_246 : int) (temp___is_init_243 : bool) (temp___do_constant_244 : bool) (temp___do_toplevel_245 : bool)  =
  (if (( temp___is_init_243 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_246)) else true)
 
 predicate default_initial_assumption #"system.ads" 101 0 0# "inline" 
   (temp___247 : int) (temp___248 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant #"system.ads" 101 0 0# "inline" 
   (temp___expr_252 : int) (temp___is_init_249 : bool) (temp___do_constant_250 : bool) (temp___do_toplevel_251 : bool)  =
  (if (( temp___is_init_249 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_252)) else true)
 
 predicate default_initial_assumption #"system.ads" 102 0 0# "inline" 
   (temp___253 : int) (temp___254 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant #"system.ads" 102 0 0# "inline" 
   (temp___expr_258 : Array__Int__Standard__integer.map) (temp___is_init_255 : bool) (temp___do_constant_256 : bool) (temp___do_toplevel_257 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 161 0 0# "inline" 
   (temp___260 : Array__Int__Standard__integer.map) (temp___261 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tscrabble_value_lookupB" defined at scrabble.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__Tscrabble_value_lookupB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "scrabble_value_lookup" defined at scrabble.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__scrabble_value_lookup__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_letter
 use        Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value

 predicate dynamic_invariant #"system.ads" 161 0 0# "inline" 
   (temp___expr_267 : Array__Int__Scrabble__scrabble_value.map) (temp___is_init_264 : bool) (temp___do_constant_265 : bool) (temp___do_toplevel_266 : bool)  =
  (forall temp___268 : int.
   (if (( (Scrabble__scrabble_letter.first <= temp___268) /\ (temp___268 <= Scrabble__scrabble_letter.last) )) then (
    (if (True) then (
     (if (temp___is_init_264) then (
      (let temp___269 = (Array__Int__Scrabble__scrabble_value.get temp___expr_267 temp___268) in (
      (let temp___270 = (Scrabble__scrabble_value.to_rep temp___269) in (
       ( ( (1 <= temp___270) /\ (temp___270 <= 5) ) \/ ( ( (8 <= temp___270) /\ (temp___270 <= 8) ) \/ ( (10 <= temp___270) /\ (temp___270 <= 10) ) ) )))
      ))
     ) else true)) else true)) else true))
 
 predicate default_initial_assumption #"scrabble.ads" 6 0 0# "inline" 
   (temp___271 : Array__Int__Scrabble__scrabble_value.map) (temp___272 : bool)  =
  true

end

(* Module giving axioms for type "T3b" defined at scrabble.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__T3b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at scrabble.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__T4b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS5bP1" defined at scrabble.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__rawscore__TS5bP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S5b" defined at scrabble.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__rawscore__S5b__axiom
 use import "_gnatprove_standard".Main
 use        Scrabble__scrabble_word
 use        Scrabble__rawscore__word
 use        Scrabble__rawscore__S5b

 predicate dynamic_invariant #"scrabble.adb" 5 0 0# "inline" 
   (temp___expr_278 : Scrabble__rawscore__S5b.s5b) (temp___is_init_275 : bool) (temp___do_constant_276 : bool) (temp___do_toplevel_277 : bool)  =
  (if (temp___do_constant_276) then (
   true) else (
   ( (Scrabble__rawscore__S5b.dynamic_property (Scrabble__scrabble_word.first Scrabble__rawscore__word.word) (Scrabble__scrabble_word.last Scrabble__rawscore__word.word) (Scrabble__rawscore__S5b.first temp___expr_278) (Scrabble__rawscore__S5b.last temp___expr_278)) /\ ( ((Scrabble__rawscore__S5b.first temp___expr_278) = (Scrabble__scrabble_word.first Scrabble__rawscore__word.word)) /\ ((Scrabble__rawscore__S5b.last temp___expr_278) = (Scrabble__scrabble_word.last Scrabble__rawscore__word.word)) ) )))
 
 predicate default_initial_assumption #"scrabble.ads" 13 0 0# "inline" 
   (temp___280 : Scrabble__rawscore__S5b.s5b) (temp___281 : bool)  =
  true

end

(* Module giving axioms for type "T6b" defined at scrabble.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Scrabble__rawscore__L_1__T6b__axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__min_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__min_int

 axiom min_int__def_axiom :
  ((System__min_int.min_int ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_int

 axiom max_int__def_axiom :
  ((System__max_int.max_int ) = 9223372036854775807)

end

(* Module for defining the value of constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_binary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_binary_modulus

 axiom max_binary_modulus__def_axiom :
  ((System__max_binary_modulus.max_binary_modulus ) = 18446744073709551616)

end

(* Module for defining the value of constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_nonbinary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_nonbinary_modulus

 axiom max_nonbinary_modulus__def_axiom :
  ((System__max_nonbinary_modulus.max_nonbinary_modulus ) = 4294967295)

end

(* Module for defining the value of constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_base_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_base_digits

 axiom max_base_digits__def_axiom :
  ((System__max_base_digits.max_base_digits ) = 18)

end

(* Module for defining the value of constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_digits

 axiom max_digits__def_axiom :
  ((System__max_digits.max_digits ) = 18)

end

(* Module for defining the value of constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_mantissa__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_mantissa

 axiom max_mantissa__def_axiom :
  ((System__max_mantissa.max_mantissa ) = 63)

end

(* Module for defining the value of constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fine_delta__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__fine_delta

 axiom fine_delta__def_axiom :
  ((System__fine_delta.fine_delta ) = (Standard__universal_real.of_real (0.000000000000000000108420217248550443400745280086994171142578125)))

end

(* Module for defining the value of constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__tick__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__tick

 axiom tick__def_axiom :
  ((System__tick.tick ) = (Standard__universal_real.of_real (1.0E-2)))

end

(* Module for defining the value of constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__storage_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_unit

 axiom storage_unit__def_axiom :
  ((System__storage_unit.storage_unit ) = 8)

end

(* Module for defining the value of constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__word_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__word_size

 axiom word_size__def_axiom :
  ((System__word_size.word_size ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__memory_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__memory_size

 axiom memory_size__def_axiom :
  ((System__memory_size.memory_size ) = 4294967296)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = (BV32.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for defining the value of constant "lookuptable" defined at scrabble.adb:6, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Scrabble__lookuptable__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__lookuptable
 use        Array__Int__Scrabble__scrabble_value
 use        Scrabble__lookuptable__aggregate_def
 use        Array__Int__Scrabble__scrabble_value

 axiom lookuptable__def_axiom :
  ((Scrabble__lookuptable.lookuptable ) = (Scrabble__lookuptable__aggregate_def.scrabble__lookuptable__aggregate_def 1 3 3 2 1 4 2 4 1 8 5 1 3 1 1 3 10 1 1 1 1 4 4 8 4 10))

end

(* Module for declaring a program function (and possibly an axiom) for "scrabble_valuePredicate" defined at scrabble.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Scrabble__scrabble_valuePredicate__axiom
 use import "_gnatprove_standard".Main
 use        Scrabble__scrabble_valuePredicate

 val scrabble_valuePredicate #"scrabble.ads" 5 0 0# 
   (i6s : int) : bool
  requires { true }
  ensures { (result = (Scrabble__scrabble_valuePredicate.scrabble_valuePredicate i6s)) }

end

(* Module for declaring a program function (and possibly an axiom) for "rawscore" defined at scrabble.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Scrabble__rawscore__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_word
 use        Scrabble__scrabble_word__axiom
 use        Scrabble__scrabblescore__axiom
 use        Scrabble__rawscore

 val rawscore #"scrabble.ads" 13 0 0# 
   (word : Scrabble__scrabble_word.scrabble_word) : int
  requires { ((Scrabble__scrabble_word.length word) <= 10) }
  ensures { ( (result = (Scrabble__rawscore.rawscore word)) /\ ( (Scrabble__scrabblescore__axiom.dynamic_invariant result True False True) /\ ( (result < 101) \/ (result > 0) ) ) ) }
 
 axiom rawscore__post_axiom :
  (forall word : Scrabble__scrabble_word.scrabble_word [(Scrabble__rawscore.rawscore word)].
   ( ( (Scrabble__scrabble_word__axiom.dynamic_invariant word True True True) /\ ((Scrabble__scrabble_word.length word) <= 10) ) -> (let result = (Scrabble__rawscore.rawscore word) in (
    ( ( (result < 101) \/ (result > 0) ) /\ (Scrabble__scrabblescore__axiom.dynamic_invariant result True False True) )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "donothing" defined at scrabble.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Scrabble__donothing__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Scrabble__rand__axiom
 use        Scrabble__donothing

 val donothing #"scrabble.ads" 20 0 0# 
   (numbers : int) : int
  requires { (numbers <= 10) }
  ensures { ( (result = (Scrabble__donothing.donothing numbers)) /\ (Scrabble__rand__axiom.dynamic_invariant result True False True) ) }
 
 axiom donothing__post_axiom :
  (forall numbers : int [(Scrabble__donothing.donothing numbers)].
   ( ( (Standard__integer.in_range numbers) /\ (numbers <= 10) ) -> (let result = (Scrabble__donothing.donothing numbers) in (
    (Scrabble__rand__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Olt

 val olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Olt.olt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ole

 val ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ole.ole left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ogt

 val ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ogt.ogt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oge

 val oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oge.oge left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oeq

 val oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oeq.oeq left right)) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "scrabble" defined at scrabble.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Scrabble__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Scrabble__scrabble_letter
 use        Scrabble__scrabble_value_lookup__axiom
 use        Scrabble__T3b
 use        Scrabble__lookuptable
 use        Scrabble__lookuptable__aggregate_def
 use        Array__Int__Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_value
 use        Scrabble__scrabble_value_lookup__axiom
 use        Scrabble__lookuptable__axiom
 use        Scrabble__scrabble_letter__axiom
 use        Scrabble__scrabble_value__axiom
 use        Scrabble__T3b__axiom

 let def #"system.ads" 81 0 0# "GP_Subp:scrabble.ads:2" "W:diverges:N" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( (let scrabble__lookuptable__assume = ( #"scrabble.adb" 7 0 0# assert { ( #"scrabble.adb" 7 0 0# "model_vc" "keep_on_simp" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:7:6" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:26" "comment:     ('A' => 1, 'B' => 3, 'C' => 3, 'D' => 2,
     ^ scrabble.adb:7:6:VC_LENGTH_CHECK" ((if ((Scrabble__T3b.first <= Scrabble__T3b.last)) then (
   ((Scrabble__T3b.last - Scrabble__T3b.first) + 1)) else (
   0)) = (if ((Scrabble__scrabble_letter.first <= Scrabble__scrabble_letter.last)) then (
   ((Scrabble__scrabble_letter.last - Scrabble__scrabble_letter.first) + 1)) else (
   0))) ) };
  ( #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 90) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 89) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 88) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 87) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 86) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 85) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 84) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 83) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 82) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 81) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 80) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 79) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 78) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 77) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 76) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 75) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 74) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 73) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 72) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 71) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 70) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 69) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 68) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 67) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 66) in (
   ()))
   end ;
  #"scrabble.adb" 7 0 0# abstract ensures {true}(let _ = (0 = 65) in (
   ()))
   end ;
  (Scrabble__lookuptable__aggregate_def.scrabble__lookuptable__aggregate_def((let temp___284 = 1 in (
   ( #"scrabble.adb" 7 0 0# assert { ( #"scrabble.adb" 7 0 0# "model_vc" "keep_on_simp" "GP_Sloc:scrabble.adb:7:14" "GP_Reason:VC_PREDICATE_CHECK" "GP_Id:0" "comment:     ('A' => 1, 'B' => 3, 'C' => 3, 'D' => 2,
             ^ scrabble.adb:7:14:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" (let temp___285 = temp___284 in (
    ( ( (1 <= temp___285) /\ (temp___285 <= 5) ) \/ ( ( (8 <= temp___285) /\ (temp___285 <= 8) ) \/ ( (10 <= temp___285) /\ (temp___285 <= 10) ) ) )))
    ) };
   temp___284 )))
  ) ((let temp___286 = 3 in (
   ( #"scrabble.adb" 7 0 0# assert { ( #"scrabble.adb" 7 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:7:24" "GP_Id:1" "comment:     ('A' => 1, 'B' => 3, 'C' => 3, 'D' => 2,
                       ^ scrabble.adb:7:24:VC_PREDICATE_CHECK" (let temp___287 = temp___286 in (
    ( ( (1 <= temp___287) /\ (temp___287 <= 5) ) \/ ( ( (8 <= temp___287) /\ (temp___287 <= 8) ) \/ ( (10 <= temp___287) /\ (temp___287 <= 10) ) ) )))
    ) };
   temp___286 )))
  ) ((let temp___288 = 3 in (
   ( #"scrabble.adb" 7 0 0# assert { ( #"scrabble.adb" 7 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:7:34" "GP_Id:2" "comment:     ('A' => 1, 'B' => 3, 'C' => 3, 'D' => 2,
                                 ^ scrabble.adb:7:34:VC_PREDICATE_CHECK" (let temp___289 = temp___288 in (
    ( ( (1 <= temp___289) /\ (temp___289 <= 5) ) \/ ( ( (8 <= temp___289) /\ (temp___289 <= 8) ) \/ ( (10 <= temp___289) /\ (temp___289 <= 10) ) ) )))
    ) };
   temp___288 )))
  ) ((let temp___290 = 2 in (
   ( #"scrabble.adb" 7 0 0# assert { ( #"scrabble.adb" 7 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:7:44" "GP_Id:3" "comment:     ('A' => 1, 'B' => 3, 'C' => 3, 'D' => 2,
                                           ^ scrabble.adb:7:44:VC_PREDICATE_CHECK" (let temp___291 = temp___290 in (
    ( ( (1 <= temp___291) /\ (temp___291 <= 5) ) \/ ( ( (8 <= temp___291) /\ (temp___291 <= 8) ) \/ ( (10 <= temp___291) /\ (temp___291 <= 10) ) ) )))
    ) };
   temp___290 )))
  ) ((let temp___292 = 1 in (
   ( #"scrabble.adb" 8 0 0# assert { ( #"scrabble.adb" 8 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:8:14" "GP_Id:4" "comment:      'E' => 1, 'F' => 4, 'G' => 2, 'H' => 4,
             ^ scrabble.adb:8:14:VC_PREDICATE_CHECK" (let temp___293 = temp___292 in (
    ( ( (1 <= temp___293) /\ (temp___293 <= 5) ) \/ ( ( (8 <= temp___293) /\ (temp___293 <= 8) ) \/ ( (10 <= temp___293) /\ (temp___293 <= 10) ) ) )))
    ) };
   temp___292 )))
  ) ((let temp___294 = 4 in (
   ( #"scrabble.adb" 8 0 0# assert { ( #"scrabble.adb" 8 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:8:24" "GP_Id:5" "comment:      'E' => 1, 'F' => 4, 'G' => 2, 'H' => 4,
                       ^ scrabble.adb:8:24:VC_PREDICATE_CHECK" (let temp___295 = temp___294 in (
    ( ( (1 <= temp___295) /\ (temp___295 <= 5) ) \/ ( ( (8 <= temp___295) /\ (temp___295 <= 8) ) \/ ( (10 <= temp___295) /\ (temp___295 <= 10) ) ) )))
    ) };
   temp___294 )))
  ) ((let temp___296 = 2 in (
   ( #"scrabble.adb" 8 0 0# assert { ( #"scrabble.adb" 8 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:8:34" "GP_Id:6" "comment:      'E' => 1, 'F' => 4, 'G' => 2, 'H' => 4,
                                 ^ scrabble.adb:8:34:VC_PREDICATE_CHECK" (let temp___297 = temp___296 in (
    ( ( (1 <= temp___297) /\ (temp___297 <= 5) ) \/ ( ( (8 <= temp___297) /\ (temp___297 <= 8) ) \/ ( (10 <= temp___297) /\ (temp___297 <= 10) ) ) )))
    ) };
   temp___296 )))
  ) ((let temp___298 = 4 in (
   ( #"scrabble.adb" 8 0 0# assert { ( #"scrabble.adb" 8 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:8:44" "GP_Id:7" "comment:      'E' => 1, 'F' => 4, 'G' => 2, 'H' => 4,
                                           ^ scrabble.adb:8:44:VC_PREDICATE_CHECK" (let temp___299 = temp___298 in (
    ( ( (1 <= temp___299) /\ (temp___299 <= 5) ) \/ ( ( (8 <= temp___299) /\ (temp___299 <= 8) ) \/ ( (10 <= temp___299) /\ (temp___299 <= 10) ) ) )))
    ) };
   temp___298 )))
  ) ((let temp___300 = 1 in (
   ( #"scrabble.adb" 9 0 0# assert { ( #"scrabble.adb" 9 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:9:14" "GP_Id:8" "comment:      'I' => 1, 'J' => 8, 'K' => 5, 'L' => 1,
             ^ scrabble.adb:9:14:VC_PREDICATE_CHECK" (let temp___301 = temp___300 in (
    ( ( (1 <= temp___301) /\ (temp___301 <= 5) ) \/ ( ( (8 <= temp___301) /\ (temp___301 <= 8) ) \/ ( (10 <= temp___301) /\ (temp___301 <= 10) ) ) )))
    ) };
   temp___300 )))
  ) ((let temp___302 = 8 in (
   ( #"scrabble.adb" 9 0 0# assert { ( #"scrabble.adb" 9 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:9:24" "GP_Id:9" "comment:      'I' => 1, 'J' => 8, 'K' => 5, 'L' => 1,
                       ^ scrabble.adb:9:24:VC_PREDICATE_CHECK" (let temp___303 = temp___302 in (
    ( ( (1 <= temp___303) /\ (temp___303 <= 5) ) \/ ( ( (8 <= temp___303) /\ (temp___303 <= 8) ) \/ ( (10 <= temp___303) /\ (temp___303 <= 10) ) ) )))
    ) };
   temp___302 )))
  ) ((let temp___304 = 5 in (
   ( #"scrabble.adb" 9 0 0# assert { ( #"scrabble.adb" 9 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:9:34" "GP_Id:10" "comment:      'I' => 1, 'J' => 8, 'K' => 5, 'L' => 1,
                                 ^ scrabble.adb:9:34:VC_PREDICATE_CHECK" (let temp___305 = temp___304 in (
    ( ( (1 <= temp___305) /\ (temp___305 <= 5) ) \/ ( ( (8 <= temp___305) /\ (temp___305 <= 8) ) \/ ( (10 <= temp___305) /\ (temp___305 <= 10) ) ) )))
    ) };
   temp___304 )))
  ) ((let temp___306 = 1 in (
   ( #"scrabble.adb" 9 0 0# assert { ( #"scrabble.adb" 9 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:9:44" "GP_Id:11" "comment:      'I' => 1, 'J' => 8, 'K' => 5, 'L' => 1,
                                           ^ scrabble.adb:9:44:VC_PREDICATE_CHECK" (let temp___307 = temp___306 in (
    ( ( (1 <= temp___307) /\ (temp___307 <= 5) ) \/ ( ( (8 <= temp___307) /\ (temp___307 <= 8) ) \/ ( (10 <= temp___307) /\ (temp___307 <= 10) ) ) )))
    ) };
   temp___306 )))
  ) ((let temp___308 = 3 in (
   ( #"scrabble.adb" 10 0 0# assert { ( #"scrabble.adb" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:10:14" "GP_Id:12" "comment:      'M' => 3, 'N' => 1, 'O' => 1, 'P' => 3,
             ^ scrabble.adb:10:14:VC_PREDICATE_CHECK" (let temp___309 = temp___308 in (
    ( ( (1 <= temp___309) /\ (temp___309 <= 5) ) \/ ( ( (8 <= temp___309) /\ (temp___309 <= 8) ) \/ ( (10 <= temp___309) /\ (temp___309 <= 10) ) ) )))
    ) };
   temp___308 )))
  ) ((let temp___310 = 1 in (
   ( #"scrabble.adb" 10 0 0# assert { ( #"scrabble.adb" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:10:24" "GP_Id:13" "comment:      'M' => 3, 'N' => 1, 'O' => 1, 'P' => 3,
                       ^ scrabble.adb:10:24:VC_PREDICATE_CHECK" (let temp___311 = temp___310 in (
    ( ( (1 <= temp___311) /\ (temp___311 <= 5) ) \/ ( ( (8 <= temp___311) /\ (temp___311 <= 8) ) \/ ( (10 <= temp___311) /\ (temp___311 <= 10) ) ) )))
    ) };
   temp___310 )))
  ) ((let temp___312 = 1 in (
   ( #"scrabble.adb" 10 0 0# assert { ( #"scrabble.adb" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:10:34" "GP_Id:14" "comment:      'M' => 3, 'N' => 1, 'O' => 1, 'P' => 3,
                                 ^ scrabble.adb:10:34:VC_PREDICATE_CHECK" (let temp___313 = temp___312 in (
    ( ( (1 <= temp___313) /\ (temp___313 <= 5) ) \/ ( ( (8 <= temp___313) /\ (temp___313 <= 8) ) \/ ( (10 <= temp___313) /\ (temp___313 <= 10) ) ) )))
    ) };
   temp___312 )))
  ) ((let temp___314 = 3 in (
   ( #"scrabble.adb" 10 0 0# assert { ( #"scrabble.adb" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:10:44" "GP_Id:15" "comment:      'M' => 3, 'N' => 1, 'O' => 1, 'P' => 3,
                                           ^ scrabble.adb:10:44:VC_PREDICATE_CHECK" (let temp___315 = temp___314 in (
    ( ( (1 <= temp___315) /\ (temp___315 <= 5) ) \/ ( ( (8 <= temp___315) /\ (temp___315 <= 8) ) \/ ( (10 <= temp___315) /\ (temp___315 <= 10) ) ) )))
    ) };
   temp___314 )))
  ) ((let temp___316 = 10 in (
   ( #"scrabble.adb" 11 0 0# assert { ( #"scrabble.adb" 11 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:11:14" "GP_Id:16" "comment:      'Q' => 10,'R' => 1, 'S' => 1, 'T' => 1,
             ^ scrabble.adb:11:14:VC_PREDICATE_CHECK" (let temp___317 = temp___316 in (
    ( ( (1 <= temp___317) /\ (temp___317 <= 5) ) \/ ( ( (8 <= temp___317) /\ (temp___317 <= 8) ) \/ ( (10 <= temp___317) /\ (temp___317 <= 10) ) ) )))
    ) };
   temp___316 )))
  ) ((let temp___318 = 1 in (
   ( #"scrabble.adb" 11 0 0# assert { ( #"scrabble.adb" 11 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:11:24" "GP_Id:17" "comment:      'Q' => 10,'R' => 1, 'S' => 1, 'T' => 1,
                       ^ scrabble.adb:11:24:VC_PREDICATE_CHECK" (let temp___319 = temp___318 in (
    ( ( (1 <= temp___319) /\ (temp___319 <= 5) ) \/ ( ( (8 <= temp___319) /\ (temp___319 <= 8) ) \/ ( (10 <= temp___319) /\ (temp___319 <= 10) ) ) )))
    ) };
   temp___318 )))
  ) ((let temp___320 = 1 in (
   ( #"scrabble.adb" 11 0 0# assert { ( #"scrabble.adb" 11 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:11:34" "GP_Id:18" "comment:      'Q' => 10,'R' => 1, 'S' => 1, 'T' => 1,
                                 ^ scrabble.adb:11:34:VC_PREDICATE_CHECK" (let temp___321 = temp___320 in (
    ( ( (1 <= temp___321) /\ (temp___321 <= 5) ) \/ ( ( (8 <= temp___321) /\ (temp___321 <= 8) ) \/ ( (10 <= temp___321) /\ (temp___321 <= 10) ) ) )))
    ) };
   temp___320 )))
  ) ((let temp___322 = 1 in (
   ( #"scrabble.adb" 11 0 0# assert { ( #"scrabble.adb" 11 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:11:44" "GP_Id:19" "comment:      'Q' => 10,'R' => 1, 'S' => 1, 'T' => 1,
                                           ^ scrabble.adb:11:44:VC_PREDICATE_CHECK" (let temp___323 = temp___322 in (
    ( ( (1 <= temp___323) /\ (temp___323 <= 5) ) \/ ( ( (8 <= temp___323) /\ (temp___323 <= 8) ) \/ ( (10 <= temp___323) /\ (temp___323 <= 10) ) ) )))
    ) };
   temp___322 )))
  ) ((let temp___324 = 1 in (
   ( #"scrabble.adb" 12 0 0# assert { ( #"scrabble.adb" 12 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:12:14" "GP_Id:20" "comment:      'U' => 1, 'V' => 4, 'W' => 4, 'X' => 8,
             ^ scrabble.adb:12:14:VC_PREDICATE_CHECK" (let temp___325 = temp___324 in (
    ( ( (1 <= temp___325) /\ (temp___325 <= 5) ) \/ ( ( (8 <= temp___325) /\ (temp___325 <= 8) ) \/ ( (10 <= temp___325) /\ (temp___325 <= 10) ) ) )))
    ) };
   temp___324 )))
  ) ((let temp___326 = 4 in (
   ( #"scrabble.adb" 12 0 0# assert { ( #"scrabble.adb" 12 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:12:24" "GP_Id:21" "comment:      'U' => 1, 'V' => 4, 'W' => 4, 'X' => 8,
                       ^ scrabble.adb:12:24:VC_PREDICATE_CHECK" (let temp___327 = temp___326 in (
    ( ( (1 <= temp___327) /\ (temp___327 <= 5) ) \/ ( ( (8 <= temp___327) /\ (temp___327 <= 8) ) \/ ( (10 <= temp___327) /\ (temp___327 <= 10) ) ) )))
    ) };
   temp___326 )))
  ) ((let temp___328 = 4 in (
   ( #"scrabble.adb" 12 0 0# assert { ( #"scrabble.adb" 12 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:12:34" "GP_Id:22" "comment:      'U' => 1, 'V' => 4, 'W' => 4, 'X' => 8,
                                 ^ scrabble.adb:12:34:VC_PREDICATE_CHECK" (let temp___329 = temp___328 in (
    ( ( (1 <= temp___329) /\ (temp___329 <= 5) ) \/ ( ( (8 <= temp___329) /\ (temp___329 <= 8) ) \/ ( (10 <= temp___329) /\ (temp___329 <= 10) ) ) )))
    ) };
   temp___328 )))
  ) ((let temp___330 = 8 in (
   ( #"scrabble.adb" 12 0 0# assert { ( #"scrabble.adb" 12 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:12:44" "GP_Id:23" "comment:      'U' => 1, 'V' => 4, 'W' => 4, 'X' => 8,
                                           ^ scrabble.adb:12:44:VC_PREDICATE_CHECK" (let temp___331 = temp___330 in (
    ( ( (1 <= temp___331) /\ (temp___331 <= 5) ) \/ ( ( (8 <= temp___331) /\ (temp___331 <= 8) ) \/ ( (10 <= temp___331) /\ (temp___331 <= 10) ) ) )))
    ) };
   temp___330 )))
  ) ((let temp___332 = 4 in (
   ( #"scrabble.adb" 13 0 0# assert { ( #"scrabble.adb" 13 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:13:14" "GP_Id:24" "comment:      'Y' => 4, 'Z' => 10);
             ^ scrabble.adb:13:14:VC_PREDICATE_CHECK" (let temp___333 = temp___332 in (
    ( ( (1 <= temp___333) /\ (temp___333 <= 5) ) \/ ( ( (8 <= temp___333) /\ (temp___333 <= 8) ) \/ ( (10 <= temp___333) /\ (temp___333 <= 10) ) ) )))
    ) };
   temp___332 )))
  ) ((let temp___334 = 10 in (
   ( #"scrabble.adb" 13 0 0# assert { ( #"scrabble.adb" 13 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PREDICATE_CHECK" "GP_Shape:lookuptable_decl__aggr" "GP_Sloc:scrabble.adb:13:24" "GP_Id:25" "comment:      'Y' => 4, 'Z' => 10);
                       ^ scrabble.adb:13:24:VC_PREDICATE_CHECK" (let temp___335 = temp___334 in (
    ( ( (1 <= temp___335) /\ (temp___335 <= 5) ) \/ ( ( (8 <= temp___335) /\ (temp___335 <= 8) ) \/ ( (10 <= temp___335) /\ (temp___335 <= 10) ) ) )))
    ) };
   temp___334 )))
  )) ) ) in (
   #"scrabble.adb" 6 0 0# assume { (scrabble__lookuptable__assume = Scrabble__lookuptable.lookuptable) }))
  ;
  #"scrabble.adb" 5 0 0# assume { (Scrabble__scrabble_value_lookup__axiom.dynamic_invariant Scrabble__lookuptable.lookuptable True False True) };
  ( "GP_Sloc:scrabble.adb:33:1" () ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "scrabble_valuePredicate" defined at scrabble.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Scrabble__scrabble_valuePredicate__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Scrabble__scrabble_value__axiom
 use        Scrabble__scrabble_valuePredicate__I6s
 use        Scrabble__scrabble_value__axiom
 use        Scrabble__scrabble_valuePredicate__I6s__axiom

 val scrabble__scrabble_valuePredicate__result #"scrabble.adb" 6 0 0#  : bool__ref 
 
 let def #"scrabble.adb" 6 0 0# "W:diverges:N" "GP_Subp:scrabble.ads:5" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram scrabble.ads:5 *)
  ;
  #"scrabble.ads" 5 0 0# assume { (Scrabble__scrabble_value__axiom.dynamic_invariant Scrabble__scrabble_valuePredicate__I6s.i6s True False False) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram scrabble.ads:5 *)
  ;
  () (* Check for RTE in the Pre of the subprogram scrabble.ads:5 *)
  ;
  #"scrabble.ads" 5 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram scrabble.ads:5 *)
  ;
  #"scrabble.ads" 5 0 0# assume { true };
  () (* checking of pragma precondition scrabble.ads:5 *)
  ;
  try
   ( ( "GP_Sloc:scrabble.ads:5:12" ( #"scrabble.ads" 5 0 0# scrabble__scrabble_valuePredicate__result.bool__content <- ( ( (Boolean.andb((1 <= Scrabble__scrabble_valuePredicate__I6s.i6s)) ((Scrabble__scrabble_valuePredicate__I6s.i6s <= 5))) || ( (Boolean.andb((8 <= Scrabble__scrabble_valuePredicate__I6s.i6s)) ((Scrabble__scrabble_valuePredicate__I6s.i6s <= 8))) || (Boolean.andb((10 <= Scrabble__scrabble_valuePredicate__I6s.i6s)) ((Scrabble__scrabble_valuePredicate__I6s.i6s <= 10))) ) ) );
   #"scrabble.ads" 5 0 0# raise Return__exc ) );
   #"scrabble.ads" 5 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition scrabble.ads:5 *)
  ;
  #"scrabble.ads" 5 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  scrabble__scrabble_valuePredicate__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "rawscore" defined at scrabble.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Scrabble__rawscore__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Scrabble__scrabble_letter
 use        Scrabble__scrabble_value
 use        Array__Int__Scrabble__scrabble_letter
 use        Scrabble__scrabble_word
 use        Scrabble__scrabble_word__axiom
 use        Scrabble__scrabblescore
 use        Scrabble__scrabblescore__axiom
 use        Scrabble__rawscore__word
 use        Array__Int__Scrabble__scrabble_value
 use        Scrabble__scrabble_value_lookup__axiom
 use        Array__Int__Scrabble__scrabble_value
 use        Scrabble__lookuptable
 use        Scrabble__lookuptable__aggregate_def
 use        Scrabble__rawscore__totalscore
 use        Scrabble__rawscore__L_1
 use        Scrabble__rawscore__L_1__T6b
 use        Scrabble__rawscore__L_1__letter_index
 use        Array__Int__Scrabble__scrabble_letter
 use        Array__Int__Scrabble__scrabble_value
 use        Standard__positive__axiom
 use        Standard__integer__axiom
 use        Scrabble__scrabble_value_lookup__axiom
 use        Scrabble__lookuptable__axiom
 use        Scrabble__rawscore__totalscore__axiom
 use        Scrabble__rawscore__L_1__letter_index__axiom
 use        Scrabble__rawscore__L_1__axiom
 use        Scrabble__scrabble_letter__axiom
 use        Scrabble__scrabble_value__axiom
 use        Scrabble__scrabble_word__axiom
 use        Scrabble__scrabblescore__axiom
 use        Scrabble__rawscore__word__axiom
 use        Scrabble__rawscore__L_1__T6b__axiom

 val scrabble__rawscore__result #"scrabble.ads" 5 0 0# "model" "model_trace:2616@result"  : int__ref 
 
 let def #"scrabble.ads" 10 0 0# "W:diverges:N" "GP_Subp:scrabble.ads:13" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"scrabble.ads" 16 0 0# "model_vc_post" "keep_on_simp" "GP_Sloc:scrabble.ads:16:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:32" "comment:       post => (RawScore'Result < 101 or RawScore'Result > 0); -- used function in post
               ^ scrabble.ads:16:16:VC_POSTCONDITION" "GP_Shape:pragargs__or" ( "GP_Pretty_Ada:2742" "GP_Sloc:scrabble.ads:16:16" ( (scrabble__rawscore__result.int__content < 101) \/ (scrabble__rawscore__result.int__content > 0) ) ) ) }
   =
  ( #"scrabble.adb" 5 0 0# assume { (Scrabble__scrabble_value_lookup__axiom.dynamic_invariant Scrabble__lookuptable.lookuptable True False True) };
  (let temp___338 = (Scrabble__lookuptable__aggregate_def.scrabble__lookuptable__aggregate_def 1 3 3 2 1 4 2 4 1 8 5 1 3 1 1 3 10 1 1 1 1 4 4 8 4 10) in (
   #"scrabble.adb" 7 0 0# assume { (temp___338 = Scrabble__lookuptable.lookuptable) }))
  ;
  () (* Assume dynamic invariants of inputs of the subprogram scrabble.ads:13 *)
  ;
  #"scrabble.ads" 8 0 0# assume { (Scrabble__scrabble_word__axiom.dynamic_invariant Scrabble__rawscore__word.word True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram scrabble.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram scrabble.ads:13 *)
  ;
  #"scrabble.ads" 13 0 0# abstract ensures {true}(let _ = (( #"scrabble.ads" 13 0 0# abstract ensures {true}(let _ = Scrabble__rawscore__word.word in (
   ()))
   end ;
  (Scrabble__scrabble_word.length(Scrabble__rawscore__word.word)) ) <= 10) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram scrabble.ads:13 *)
  ;
  #"scrabble.ads" 13 0 0# assume { ((Scrabble__scrabble_word.length Scrabble__rawscore__word.word) <= 10) };
  () (* checking of pragma precondition scrabble.ads:13 *)
  ;
  try
   ( #"scrabble.adb" 17 0 0# Scrabble__rawscore__totalscore.totalscore.int__content <- ( 0 );
   #"scrabble.ads" 10 0 0# assume { (Scrabble__scrabblescore__axiom.dynamic_invariant Scrabble__rawscore__totalscore.totalscore.int__content True False True) };
   ( "GP_Sloc:scrabble.adb:19:38" (let temp___336 = ( #"scrabble.adb" 19 0 0# abstract ensures {true}(let _ = Scrabble__rawscore__word.word in (
    ()))
    end ;
   (Scrabble__scrabble_word.first(Scrabble__rawscore__word.word)) ) in (
   (let temp___337 = ( #"scrabble.adb" 19 0 0# abstract ensures {true}(let _ = Scrabble__rawscore__word.word in (
    ()))
    end ;
   (Scrabble__scrabble_word.last(Scrabble__rawscore__word.word)) ) in (
    ( #"scrabble.ads" 13 0 0# Scrabble__rawscore__L_1__letter_index.letter_index.int__content <- ( temp___336 );
    () (* Translation of an Ada loop from scrabble.adb:19 *)
    ;
    (if ((Boolean.andb((temp___336 <= Scrabble__rawscore__L_1__letter_index.letter_index.int__content)) ((Scrabble__rawscore__L_1__letter_index.letter_index.int__content <= temp___337)))) then (
     try
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop scrabble.adb:19 *)
      ;
      () (* While loop translating the Ada loop from scrabble.adb:19 *)
      ;
      #"scrabble.adb" 19 0 0# while True do
       invariant { 
        ( #"scrabble.adb" 20 0 0# "model_vc" "keep_on_simp" "GP_Sloc:scrabble.adb:20:10" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:31" "comment:         pragma Loop_Invariant(TotalScore <= 10*(Letter_Index - Word'First));
         ^ scrabble.adb:20:10:VC_LOOP_INVARIANT" "GP_Shape:L_1_while" ( "GP_Pretty_Ada:2465" "GP_Sloc:scrabble.adb:20:32" (Scrabble__rawscore__totalscore.totalscore.int__content <= (10 * (Scrabble__rawscore__L_1__letter_index.letter_index.int__content - (Scrabble__scrabble_word.first Scrabble__rawscore__word.word)))) ) )
        }
       ( () (* Assume implicit invariants from the loop scrabble.adb:19 *)
       ;
       #"scrabble.ads" 13 0 0# assume { (Boolean.andb((Boolean.andb((if (((Scrabble__scrabble_word.first Scrabble__rawscore__word.word) <= (Scrabble__scrabble_word.last Scrabble__rawscore__word.word))) then (
        (Scrabble__rawscore__L_1__T6b.dynamic_property (Scrabble__scrabble_word.first Scrabble__rawscore__word.word) (Scrabble__scrabble_word.last Scrabble__rawscore__word.word) Scrabble__rawscore__L_1__letter_index.letter_index.int__content)) else true)) ((Scrabble__scrabblescore__axiom.dynamic_invariant Scrabble__rawscore__totalscore.totalscore.int__content False True True)))) (( ((Scrabble__scrabble_word.first Scrabble__rawscore__word.word) <= Scrabble__rawscore__L_1__letter_index.letter_index.int__content) /\ (Scrabble__rawscore__L_1__letter_index.letter_index.int__content <= (Scrabble__scrabble_word.last Scrabble__rawscore__word.word)) ))) };
       () (* Check for absence of RTE in the invariant of loop scrabble.adb:19 *)
       ;
       #"scrabble.ads" 13 0 0# abstract ensures {true}(let _ = (Scrabble__rawscore__totalscore.totalscore.int__content <= ( #"scrabble.adb" 20 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:scrabble.adb:20:48" "GP_Id:30" "comment:         pragma Loop_Invariant(TotalScore <= 10*(Letter_Index - Word'First));
                                               ^ scrabble.adb:20:48:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__cmp__mult" (Standard__integer.range_check_((10 * ( #"scrabble.adb" 20 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:scrabble.adb:20:63" "GP_Id:29" "comment:         pragma Loop_Invariant(TotalScore <= 10*(Letter_Index - Word'First));
                                                              ^ scrabble.adb:20:63:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__cmp__mult__sub" (Standard__integer.range_check_((Scrabble__rawscore__L_1__letter_index.letter_index.int__content - ( #"scrabble.adb" 19 0 0# abstract ensures {true}(let _ = Scrabble__rawscore__word.word in (
        ()))
        end ;
       (Scrabble__scrabble_word.first(Scrabble__rawscore__word.word)) )))) )))) )) in (
        ()))
        end ;
       () (* Loop statements appearing after the loop invariant of loop scrabble.adb:19 *)
       ;
       ( "GP_Sloc:scrabble.adb:21:21" #"scrabble.adb" 21 0 0# Scrabble__rawscore__totalscore.totalscore.int__content <- ( ( #"scrabble.adb" 21 0 0# "model_vc" "keep_on_simp" "GP_Sloc:scrabble.adb:21:35" "GP_Shape:L_1_while__totalscore_assign__add" "GP_Reason:VC_RANGE_CHECK" "GP_Id:28" "comment:         TotalScore := TotalScore + LookUpTable(Word(Letter_Index));
                                  ^ scrabble.adb:21:35:VC_RANGE_CHECK" (Scrabble__scrabblescore.range_check_(( #"scrabble.adb" 21 0 0# "model_vc" "keep_on_simp" "GP_Sloc:scrabble.adb:21:35" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:27" "comment:         TotalScore := TotalScore + LookUpTable(Word(Letter_Index));
                                  ^ scrabble.adb:21:35:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__totalscore_assign__add" (Standard__integer.range_check_((Scrabble__rawscore__totalscore.totalscore.int__content + (Scrabble__scrabble_value.to_rep((Array__Int__Scrabble__scrabble_value.get(Scrabble__lookuptable.lookuptable) ((Scrabble__scrabble_letter.to_rep((Array__Int__Scrabble__scrabble_letter.get((Scrabble__scrabble_word.to_array(Scrabble__rawscore__word.word))) (Scrabble__rawscore__L_1__letter_index.letter_index.int__content))))))))))) ))) ) ) );
       #"scrabble.adb" 19 0 0# Scrabble__rawscore__L_1__letter_index.letter_index.int__content <- ( (Scrabble__rawscore__L_1__letter_index.letter_index.int__content + 1) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop scrabble.adb:19 *)
       ;
       (if ((Scrabble__rawscore__L_1__letter_index.letter_index.int__content <= temp___337)) then (
        ()) else (
        #"scrabble.adb" 19 0 0# raise Scrabble__rawscore__L_1.L_1)) )
      done )
     with
      Scrabble__rawscore__L_1.L_1 -> ()
     end)) )))
   ))
    );
   ( "GP_Sloc:scrabble.adb:23:7" ( #"scrabble.adb" 23 0 0# scrabble__rawscore__result.int__content <- ( Scrabble__rawscore__totalscore.totalscore.int__content );
   #"scrabble.adb" 23 0 0# raise Return__exc ) );
   #"scrabble.adb" 15 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition scrabble.ads:13 *)
  ;
  #"scrabble.adb" 15 0 0# abstract ensures {true}(let _ = (Boolean.orb((scrabble__rawscore__result.int__content < 101)) ((scrabble__rawscore__result.int__content > 0))) in (
   ()))
   end ;
  scrabble__rawscore__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "donothing" defined at scrabble.ads:20, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Scrabble__donothing__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__axiom
 use        Scrabble__donothing__numbers
 use        Standard__integer__axiom
 use        Scrabble__donothing__numbers__axiom

 val scrabble__donothing__result #"scrabble.ads" 10 0 0# "model" "model_trace:2657@result"  : int__ref 
 
 let def #"scrabble.ads" 11 0 0# "W:diverges:N" "GP_Subp:scrabble.ads:20" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram scrabble.ads:20 *)
  ;
  #"system.ads" 1 0 0# assume { (Standard__integer__axiom.dynamic_invariant Scrabble__donothing__numbers.numbers True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram scrabble.ads:20 *)
  ;
  () (* Check for RTE in the Pre of the subprogram scrabble.ads:20 *)
  ;
  #"scrabble.ads" 20 0 0# abstract ensures {true}(let _ = (Scrabble__donothing__numbers.numbers <= 10) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram scrabble.ads:20 *)
  ;
  #"scrabble.ads" 20 0 0# assume { (Scrabble__donothing__numbers.numbers <= 10) };
  () (* checking of pragma precondition scrabble.ads:20 *)
  ;
  try
   ( ( "GP_Sloc:scrabble.adb:29:7" ( #"scrabble.adb" 29 0 0# scrabble__donothing__result.int__content <- ( 5 );
   #"scrabble.adb" 29 0 0# raise Return__exc ) );
   #"scrabble.adb" 26 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition scrabble.ads:20 *)
  ;
  #"scrabble.adb" 26 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  scrabble__donothing__result.int__content )
end
